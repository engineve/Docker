출처 : 구글링

소프트웨어의 개발(Development)과 운영(Operations)의 합성어, 소프트웨어 개발자와 정보기술 전문가 간의 소통, 협업 및 통합을 강조하는 개발 환경이나 문화. 즉 시스템 개발과 운영을 병행 및 협업.

DevOps 엔지니어 : 소프트웨어 개발 라이프사이클을 이해하고 소프트웨어 엔지니어링 툴과 프로세스를 도입해 전통적인 운영 과제를 해결하는 사람

 개발자는 개발이 완료된 시스템을 운영팀에게 이관하고 운영팀은 개발된 시스템을 배포/관리 운영(빠른 시간에 개발 및 배포하는 것이 목적)


- 서버 측 기능에 대한 사양 및 문서 작성
- CI/CD 관리
- CI/CD 스크립트 작성
- 성능 평가 및 모니터링
- IT 인프라 유지보수 및 관리(하드웨어, 소프트웨어, 네트워크, 스토리지, 가상 및 원격 자산, 클라우드 데이터 스토리지 포괄)

** CI/CD는 어플리케이션 개발 단계를 자동화하여, 어플리케이션을 보다 짧은 주기로 고객에게 제공하는 방법.
지속적인 통합(Continuous Integration), 지속적인 전달(Continuous Delivery), 지속적인 배포(Continuous Deployment)가 CI/CD의 기본 개념으로, 이를 자동화하는 것은 배포가 잦은 MSA 시스템에 꼭 필요한 요소 중 하나.

1. 클라우드 컴퓨팅

사용자의 직접적인 활발한 관리 없이 특히 데이터 스토리지(클라우드 스토리지)와 컴퓨팅 파워와 같은 컴퓨터 시스템 자원을 필요 시 바로 제공(on-demand availability)하는 것. 일반적으로는 인터넷 기반 컴퓨팅의 일종으로 정보를 자신의 컴퓨터가 아닌 클라우드에 연결된 다른 컴퓨터로 처리하는 기술을 의미.
 

2. 스케일 아웃(Scale-out)과 스케일 업(Scale-up)의 차이.

(1) 스케일 아웃 : 접속된 서버의 대수를 늘려 처리 능력 향상, 수평 스케일, 저렴한 서버 사용, 읽기/쓰기가 여러 대의 서버에 분산되어 처리됨으로 장애 시 전면 장애의 가능성이 적음.

(2) 스케일 업 : 서버 하드웨어 장비 성능 향상, 수직 스케일, 성능 증가에 따른 비용 증가폭 큼, 한 대의 서버에 부하 집중 되어 장애 시 장애 영향도 큼.

 
3. MSA(Micro Service Architecture)


하나의 큰 어플리케이션을 여러개의 작은 어플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 아키텍쳐

소규모 프로젝트에는 Monolithic Architecture가 훨씬 합리적. 유지보수가 용이하기 때문.

* 서비스/프로젝트가 커지면 커질수록, 영향도 파악 및 전체 시스템 구조의 파악에 어려움.
* 빌드 시간 및 테스트 시간, 그리고 배포시간이 기하급수적으로 늘어남.
* 서비스를 부분적으로 scale-out하기가 힘듬.
* 부분의 장애가 전체 서비스의 장애로 이어지는 경우가 발생.


small services, each running in its own process, independently deployable

MSA(Micro Service Architecture)는 비즈니스 민첩성(Business agility)과 관련이 큼  서비스나 프로젝트가 크고, 복잡하고, 장기적으로 운영될 수록, MSA의 장점이 더욱 드러남

* 각각의 서비스는 그 크기가 작을 뿐, 서비스 자체는 하나의 모놀리틱 아키텍쳐와 유사한 구조를 가짐
* 각각의 서비스는 독립적으로 배포가 가능해야함.
* 각각의 서비스는 다른 서비스에 대한 의존성이 최소화 되어야함
* 각 서비스는 개별 프로세스로 구동 되며, REST와 같은 가벼운 방식으로 통신되어야 함.

장점 : 
* 배포(deployment) 관점 - 서비스별 배포 가능 (배포 시 전체 서비스의 중단이 없음)
    * 요구사항을 신속하게 반영하여 빠르게 배포할 수 있음.
* 확장(scaling) 관점 - 특정 서비스에 대한 확장성이 용이함.
    * 클라우드 사용에 적합한 아키텍쳐.
* 장애(failure) 관점 - 장애가 전체 서비스로 확장될 가능성이 적음
    * 부분적 장애에 대한 격리가 수월함

단점 : 
* 성능 - 서비스 간 호출 시 API를 사용하기 때문에, 통신 비용이나, Latency가 그만큼 늘어남.

* 테스트 / 트랜잭션 - 서비스가 분리되어 있기 때문에 테스트와 트랜잭션의 복잡도가 증가하고, 많은 자원을 필요로 함.

* 데이터 관리 - 데이터가 여러 서비스에 걸쳐 분산되기 때문에 한번에 조회하기 어렵고, 데이터의 정합성 또한 관리하기 어려움.


4. 컨테이너

컨테이너에는 운영체제가 포함되지 않아 크기가 수십 MB로 작음. 반면 VM에는 운영체제가 포함되므로 보통 수 GB에 달함. 결국, 컨테이너는 서버 1대에서 실행할 수 있는 개수가 VM보다 최대 10배 이상 많고, 운영체제 부팅이 필요 없어 불과 수초 만에 서비스를 시작할 수 있음. 
컨테이너라고 하는 표준 소프트웨어 패키지는 애플리케이션의 코드를 관련 구성 파일, 라이브러리 및 앱 실행에 필요한 종속성과 함께 번들로 제공(개발, 배포가 쉬워짐)
 
5. 컨테이너를 위한 운영 환경

쿠버네티스, Docker Swarm, Apache Mesos

컨테이너들의 스케쥴링, 상태 체크, 재가동, 로드밸런싱, 모니터링 등 종합관리 환경(Container Orchestration)
 
6. 쿠버네티스

밴더 또는 플랫폼에 종속되지 않아 public cloud(구글, AWS,  Azure), private cloud(open stack), bear metal(가상화 되지 않은 서버) 셋다 사용 가능

애플리케이션 배포 단순화
쿠버네티스는 모든 워커 노드를 단일 배포 플랫폼으로 제공하므로 개발자가 클러스터를 구성하는 서버에 대해 깊이 들여다 볼 필요를 없애줌.

높은 하드웨어 활용도
쿠버네티스에 애플리케이션을 실행하도록 지시하면 리소스 요구사항에 대한 설명과 각 노드에서 사용 가능한 리소스에 따라 애플리케이션을 실행할 가장 적합한 노드를 선택하게 됨. 또한 클러스터를 중심으로 애플리케이션이 언제든지 이동할 수 있으므로 인프라를 훨씬 효율적으로 활용할 수 있음.

상태 확인 및 자가 치유
쿠버네티스는 노드에 장애가 발생하면 다른 노드로 일정을 자동으로 재조정. 즉, 운영팀이 수동으로 애플리케이션을 이전하지 않아도 되게 됨.

오토스케일링
쿠버네티스는 애플리케이션에 급격한 부하가 발생하면 이를 대응하기 위해 전체 클러스터 크기를 자동으로 확대 또는 축소할 수 있음.

 
7. 쿠버네티스 클러스터의 기본 아키텍처

마스터-노드 구조

쿠버네티스 Master에 API 서버와 상태 저장소를 두고 각 서버(Node)의 에이전트(kubelet)와 통신하는 단순한 구조.
 
8. 쿠버네티스에서 Auto Scaling

CPU, memory 사용량에 따른 확장. 컨테이너의 개수를 조정하는 Horizontal Pod Autoscaler(HPA), 컨테이너의 리소스 할당량을 조정하는 Vertical Pod Autoscaler(VPA), 서버 개수를 조정하는 Cluster Autosclaer(CA) 방식이 있음.